<?php

/**
 * @file
 * Primary module hooks for bricc module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function bricc_theme(): array {
  return [
    'bricc_category' => ['render element' => 'elements'],
    'bricc_card_item' => ['render element' => 'elements'],
    'applicant_detail' => [
      'variables' => [
        'detail' => NULL,
      ],
    ],
    'applicant_detail_alt' => [
      'variables' => [
        'detail' => NULL,
        'is_print' => NULL,
      ],
    ],
  ];
}

/**
 * Prepares variables for category templates.
 *
 * Default template: bricc-category.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the category information and
 *   any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_bricc_category(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Prepares variables for card item templates.
 *
 * Default template: bricc-card-item.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the card item information and
 *   any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_bricc_card_item(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 *
 * @todo Handle content ownership for card items
 */
function bricc_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish categories.
      $storage = \Drupal::entityTypeManager()->getStorage('bricc_category');
      $bricc_category_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($bricc_category_ids) as $bricc_category) {
        $bricc_category->set('status', FALSE)->save();
      }

      // Unpublish Card Item
      $storageCard = \Drupal::entityTypeManager()->getStorage('bricc_card_item');
      $bricc_card_ids = $storageCard->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storageCard->loadMultiple($bricc_card_ids) as $bricc_card_item) {
        $bricc_card_item->set('status', FALSE)->save();
      }

      break;

    case 'user_cancel_reassign':
      // Anonymize categories.
      $storage = \Drupal::entityTypeManager()->getStorage('bricc_category');
      $bricc_category_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storage->loadMultiple($bricc_category_ids) as $bricc_category) {
        $bricc_category->setOwnerId(0)->save();
      }

      // Anonymize card item.
      $storageCard = \Drupal::entityTypeManager()->getStorage('bricc_card_item');
      $bricc_card_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->accessCheck(FALSE)
        ->execute();
      foreach ($storageCard->loadMultiple($bricc_card_ids) as $bricc_card_item) {
        $bricc_card_item->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function bricc_user_predelete(UserInterface $account): void {
  // Delete categories that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('bricc_category');
  $bricc_category_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->accessCheck(FALSE)
    ->execute();
  $storage->delete(
    $storage->loadMultiple($bricc_category_ids)
  );
}

/**
 * Implements hook_page_attachments().
 */
function bricc_page_attachments(array &$attachments) {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $attachments['#attached']['library'][] = 'bricc/admin';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bricc_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['#submit'][] = 'bricc_user_login_submit';
}

/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the dashboard after logging in.
 */
function bricc_user_login_submit(&$form, FormStateInterface $form_state) {
  $url = Url::fromRoute('bricc.admin');

  // Check if a destination was set, probably on an exception controller.
  // @see \Drupal\user\Form\UserLoginForm::submitForm()
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  if (!$request->request->has('destination')) {
    $form_state->setRedirectUrl($url);
  }
  else {
    $request->query->set('destination', $request->request->get('destination'));
  }
}

/**
 * Implements hook_views_data().
 */
function bricc_views_data() {
  $data = [];

  $data['bricc_applicant_remote_data']['table']['group'] = 'bricc_applicant_remote_data';
  $data['bricc_applicant_remote_data']['table']['base'] = [
    'title' => 'BRI CC Applicant remote data',
    'query_id' => 'views_remote_data_query',
  ];

  return $data;
}

/**
 * Implements hook_form_alter().
 */
function bricc_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'views_exposed_form') {
    if ($form['#id'] === 'views-exposed-form-applicant-page-1' ||
        $form['#id'] === 'views-exposed-form-applicant-page-2') {
      $form = array_merge([
        'filtering_type' => [
          '#type' => 'select',
          '#title' => t('Filter type'),
          '#options' => [
            'date' => t('Date'),
            'name' => t('Name'),
          ],
          '#default_value' => 'date',
        ],
      ], $form);

      // Jenis kartu to use dropdown
      $card_items = \Drupal::entityTypeManager()->getStorage('bricc_card_item')->loadByProperties([
        'status' => 1,
      ]);
      $option_jenis_kartu = ['' => 'All'];
      /** @var \Drupal\bricc\Entity\BriccCardItem $card_item */
      foreach ($card_items as $card_item) {
        if (!$card_item->get('field_idcardtype')->isEmpty()) {
          $key = $card_item->get('field_idcardtype')->value;
          $label = $card_item->label();
          $option_jenis_kartu[$key] = $label;
        }
      }
      $form['jeniskartu']['#type'] = 'select';
      $form['jeniskartu']['#options'] = $option_jenis_kartu;
      unset($form['jeniskartu']['#size']);

      // Edit field to be type date
      $field_date = [
        'startdate', 'enddate', 'tgllahir',
      ];
      foreach ($field_date as $field) {
        $form[$field]['#type']= 'date';
      }

      $export_route = 'view.applicant.data_export_1';
      if ($form['#id'] === 'views-exposed-form-applicant-page-2') {
        $export_route = 'view.applicant.data_export_2';
      }

      $current_request = \Drupal::service('request_stack')->getCurrentRequest();
      $current_query_string = $current_request->query->all();
      if (!empty($current_query_string)) {
        $form['actions']['export'] = [
          '#type' => 'link',
          '#title' => t('Export'),
          '#url' => Url::fromRoute($export_route, [], [
            'query' => $current_query_string,
          ]),
          '#attributes' => [
            'class' => ['button js-form-submit form-submit'],
          ],
          '#weight' => 10,
        ];
      }
    }
  }
  elseif ($form_id === 'bricc_card_item_add_form' || $form_id === 'bricc_card_item_edit_form') {
    // Card type
    $card_type_options = \Drupal::service('bricc.parser_remote_data')->formattedCardType();
    $form['select_idcardtype'] = [
      '#type' => 'select',
      '#title' => t('Card link'),
      '#options' => $card_type_options,
      '#default_value' => $form['field_idcardtype']['widget'][0]['value']['#default_value'], // Set the default value if needed.
      '#description' => t('Connect this data with BRI Card Type'),
      '#weight' => 0,
//      '#required' => TRUE,
    ];
    $form['field_idcardtype']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
  }
  elseif ($form_id === 'node_card_detail_form' || $form_id === 'node_card_detail_edit_form') {
    $form['#validate'][] = 'bricc_card_detail_page_form_validate';
  }
}

function bricc_card_detail_page_form_validate(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->hasValue('field_card_item')) {
    $field_card_item = $form_state->getValue('field_card_item');
    if (isset($field_card_item[0]['target_id'])) {
      $node = $form_state->getFormObject()->getEntity();

      // Check is there a card detail page with the same target_id
      $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
        'field_card_item' => $field_card_item[0]['target_id'],
      ]);

      // Create the entity query.
      $query = \Drupal::entityQuery('node')
        ->accessCheck(FALSE)
        ->condition('type', 'card_detail')
        ->condition('field_card_item', $field_card_item[0]['target_id']);

      // If update mode
      if (!$node->isNew()) {
        $current_nid = $node->id();
        $query->condition('nid', $current_nid, '<>');
      }

      // Execute the query to get the node IDs.
      $nids = $query->execute();

      if (count($nids) > 0) {
        $form_state->setErrorByName('field_card_item', t('The are already Card detail page for this Card item.'));
      }
    }
  }
}
