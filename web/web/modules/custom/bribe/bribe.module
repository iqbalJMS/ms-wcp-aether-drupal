<?php

/**  
 * @file  
 * Bri Backend Integration.  
 */
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Messenger\MessengerInterface;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Entity\EntityFieldManagerInterface;  
use Drupal\Core\Entity\EntityTypeManagerInterface; 

use Drupal\bribe\Controller\PromoSubCategoryController;
use Drupal\bribe\Controller\PromoCategoryController;
use Drupal\bribe\Controller\PromoController;
use Drupal\bribe\Controller\PromoLocationController;
use Drupal\bribe\Controller\PromoMicrositeController;


function bribe_page_attachments(array &$attachments)
{
    $attachments['#attached']['library'][] = 'bribe/promo';
}

function bribe_node_presave(Node $node)
{
    $getRoute = $node->getType();

    $getValidation = bribeValidation($node);

    if (is_string($getValidation)) {
        \Drupal::messenger()->addError('An error occurred while save data: ' . $getValidation);

        $url = \Drupal\Core\Url::fromRoute('bribe.' . $getRoute);
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url->toString());
        $response->send();
        exit;
    }
}

function bribe_node_delete($node)
{

    $getDeleteRoute = $node->getType();

    switch ($getDeleteRoute) {
        case 'promo':
            $remote = new PromoController(\Drupal::service('bribe.promo'));
            $idPromo = $node->get('field_promo_id')->value;
            $response = $remote->remoteDelete($idPromo);
            break;
        case 'promo_category':
            $remote = new PromoCategoryController(\Drupal::service('bribe.promo.category'));
            $idCategory = $node->get('field_category_id')->value;
            $response = $remote->remoteDelete($idCategory);
            break;
        case 'promo_sub_category':
            $idSub = $node->get('field_subcategory_id')->value;
            $remote = new PromoSubCategoryController(\Drupal::service('bribe.promo.sub_category'));
            $response = $remote->remoteDelete($idSub);
            break;
        case 'promo_location':
            $idLocation = $node->get('field_location_id')->value;
            $remote = new PromoLocationController(\Drupal::service('bribe.promo.location'));
            $response = $remote->remoteDelete($idLocation);
            break;
        case 'promo_microsite_owner':
            $idMicrosite = $node->get('field_microsite_id')->value;
            $remote = new PromoMicrositeController(\Drupal::service('bribe.promo.microsite'));
            $response = $remote->remoteDelete($idMicrosite);
            break;
    }
    if (is_string($response)) {
        \Drupal::messenger()->addError('An error occurred while save data: ' . $response);

        $url = \Drupal\Core\Url::fromRoute('bribe.' . $getDeleteRoute);
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url->toString());
        $response->send();
        exit;
    }

}

/**
 * Function to save data to the external API.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node object to be sent to the API.
 *
 * @return \Psr\Http\Message\ResponseInterface|null
 *   The response from the external API or null on failure.
 */
function bribeValidation($node)
{

    $type = $node->getType();

    switch ($type) {
        case 'promo':
            $remote = new PromoController(\Drupal::service('bribe.promo'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_category':
            $remote = new PromoCategoryController(\Drupal::service('bribe.promo.category'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_sub_category':
            $remote = new PromoSubCategoryController(\Drupal::service('bribe.promo.sub_category'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_location':
            $remote = new PromoLocationController(\Drupal::service('bribe.promo.location'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_microsite_owner':
            $remote = new PromoMicrositeController(\Drupal::service('bribe.promo.microsite'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
    }

    return $response;
}
