<?php

/**  
 * @file  
 * Bri Backend Integration.  
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

use Drupal\bribe\Controller\PromoSubCategoryController;
use Drupal\bribe\Controller\PromoCategoryController;
use Drupal\bribe\Controller\PromoController;
use Drupal\bribe\Controller\PromoLocationController;
use Drupal\bribe\Controller\PromoMicrositeController;


function bribe_page_attachments(array &$attachments)
{
    $attachments['#attached']['library'][] = 'bribe/promo';
}

function bribe_node_presave(Node $node)
{
    $alias_manager = \Drupal::service('path_alias.manager');
    $internal_path = '/node/' . $node->id();
    $url_alias = $node->get('path')->getValue();
    $url_alias = $url_alias[0]['alias'] ?? '';
    $url_alias = explode('/', $url_alias);

    if(!empty($url_alias)) {
        $node->set('path', '/'.end($url_alias));
    }
    $title = $node->getTitle();
    if (!empty($title)) {
        $filtered_title = strip_tags($title);
        $node->setTitle($filtered_title);

    }
    $log_message = $node->get('revision_log')->getValue();
    if (!empty($log_message)) {
        $filtered_log = strip_tags($log_message[0]['value']);
        $node->set('revision_log', $filtered_log);
    }

    $getRoute = $node->getType();

    $getValidation = bribeValidation($node);

    if (is_string($getValidation)) {
        \Drupal::messenger()->addError('An error occurred while save data: ' . $getValidation);

        $url = \Drupal\Core\Url::fromRoute('bribe.' . $getRoute);
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url->toString());
        $response->send();
        exit;
    }
}

function bribe_node_delete($node)
{

    $getDeleteRoute = $node->getType();

    switch ($getDeleteRoute) {
        case 'promo':
            $remote = new PromoController(\Drupal::service('bribe.promo'));
            $idPromo = $node->get('field_promo_id')->value;
            $response = $remote->remoteDelete($idPromo);
            break;
        case 'promo_category':
            $remote = new PromoCategoryController(\Drupal::service('bribe.promo.category'));
            $idCategory = $node->get('field_category_id')->value;
            $response = $remote->remoteDelete($idCategory);
            break;
        case 'promo_sub_category':
            $idSub = $node->get('field_subcategory_id')->value;
            $remote = new PromoSubCategoryController(\Drupal::service('bribe.promo.sub_category'));
            $response = $remote->remoteDelete($idSub);
            break;
        case 'promo_location':
            $idLocation = $node->get('field_location_id')->value;
            $remote = new PromoLocationController(\Drupal::service('bribe.promo.location'));
            $response = $remote->remoteDelete($idLocation);
            break;
        case 'promo_microsite_owner':
            $idMicrosite = $node->get('field_microsite_id')->value;
            $remote = new PromoMicrositeController(\Drupal::service('bribe.promo.microsite'));
            $response = $remote->remoteDelete($idMicrosite);
            break;
    }
    if (is_string($response)) {
        \Drupal::messenger()->addError('An error occurred while save data: ' . $response);

        $url = \Drupal\Core\Url::fromRoute('bribe.' . $getDeleteRoute);
        $response = new \Symfony\Component\HttpFoundation\RedirectResponse($url->toString());
        $response->send();
        exit;
    }

}

/**
 * Function to save data to the external API.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The node object to be sent to the API.
 *
 * @return \Psr\Http\Message\ResponseInterface|null
 *   The response from the external API or null on failure.
 */
function bribeValidation($node)
{

    $type = $node->getType();

    $response = null;

    switch ($type) {
        case 'promo':
            $remote = new PromoController(\Drupal::service('bribe.promo'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_category':
            $remote = new PromoCategoryController(\Drupal::service('bribe.promo.category'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_sub_category':
            $remote = new PromoSubCategoryController(\Drupal::service('bribe.promo.sub_category'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_location':
            $remote = new PromoLocationController(\Drupal::service('bribe.promo.location'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
        case 'promo_microsite_owner':
            $remote = new PromoMicrositeController(\Drupal::service('bribe.promo.microsite'));
            if ($node->isNew()) {
                $response = $remote->remoteCreate($node);
            } else {
                $response = $remote->remoteUpdate($node);
            }
            break;
    }

    return $response;
}

function bribe_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id)
{   // $form['#validate'][] = 'custom_xss_filter_validate_node_form';

    $form_object = $form_state->getFormObject();
    $node = $form_object->getEntity();
    $content_type = $node->bundle();

    $type = array('promo', 'promo_category', 'promo_sub_category', 'promo_location', 'promo_microsite_owner', 'promo_product');

    if (in_array($content_type, $type)) {
        $form['actions']['submit']['#submit'][] = 'bribe_node_form_submit';
    }
}

function bribe_node_form_submit($form, FormStateInterface $form_state)
{
    $form_object = $form_state->getFormObject();
    $node = $form_object->getEntity();
    $content_type = $node->bundle();

    $form_state->setRedirect('bribe.' . $content_type);
}

function bribe_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    // // Check if we are on the content administration page.
    if ($form_id == 'views_exposed_form' && $form['#id'] === 'views-exposed-form-content-page-1') {
        $hidden_content_types = ['promo', 'promo_category', 'promo_location', 'promo_microsite_owner', 'promo_sub_category'];

        // Get the current options for the content type filter.
        $content_type_options = $form['type']['#options'];

        // Loop through the hidden content types and unset them from the options.
        foreach ($hidden_content_types as $type) {
            if (isset($content_type_options[$type])) {
                unset($content_type_options[$type]);
            }
        }

        // Set the modified options back to the form.
        $form['type']['#options'] = $content_type_options;
    }
}
