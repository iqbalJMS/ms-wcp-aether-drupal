<?php

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements brimw_options_select_simulation_allowed_values()
 * This function is called in config/sync
 */
function brimw_options_select_simulation_allowed_values(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, &$cacheable = TRUE)
{
  return \Drupal::service('brimw.simulation_remote_data')->getAllInstallmentSchemes();
}

function brimw_select_field_currency_allowed_values(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, &$cacheable = TRUE)
{
  return array_column(\Drupal::service('brimw.kurs_remote_data')->getKurs(), 'currency', 'currency');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function brimw_form_taxonomy_term_location_type_form_alter(
  &$form,
  \Drupal\Core\Form\FormStateInterface $form_state,
  $form_id
) {
  // Dummy location type
  $location_type = [
    '_none' => '- Please select a location type -',
    '123' => 'Unit Kerja',
    '234' => 'ATM',
    '345' => 'BRILINK',
    '456' => 'Weekend Banking',
  ];

  $form['select_idlocationtype'] = [
    '#type' => 'select',
    '#title' => t('Location type'),
    '#options' => $location_type,
    '#default_value' => $form['field_location_type']['widget'][0]['value']['#default_value'], // Set the default value if needed.
    '#description' => t('Connect this data with BRI Location Type'),
    '#weight' => 0,
  ];
  $form['field_location_type']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
  $form['#validate'][] = 'brimw_location_type_form_validate';
}

function brimw_location_type_form_validate(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($form_state->hasValue('field_location_type')) {
    $field_locationtype = $form_state->getValue('field_location_type');
    if (isset($field_locationtype[0]['value'])) {
      /** @var \Drupal\taxonomy\Entity\Term $term */
      $term = $form_state->getFormObject()->getEntity();

      // Check is there a card item that already connect with this BRI card
      $query = \Drupal::entityQuery('taxonomy_term')
        ->accessCheck(FALSE)
        ->condition('vid', $term->bundle(), '=')
        ->condition('field_location_type', $field_locationtype[0]['value']);

      // If update mode
      if (!$term->isNew()) {
        $current_tid = $term->id();
        $query->condition('tid', $current_tid, '<>');
      }

      // Execute the query to get the node IDs.
      $tids = $query->execute();

      if (count($tids) > 0) {
        $form_state->setErrorByName('field_location_type', t('There are already term link to this location type.'));
      }
    }
  }
}

function brimw_page_attachments(array &$attachments) {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $attachments['#attached']['library'][] = 'brimw/admin';
  }
}


/**
 * Implements hook_views_data().
 */
function brimw_views_data() {
  $data = [];

  $data['brimw_location_remote_data']['table']['group'] = 'brimw_location_remote_data';
  $data['brimw_location_remote_data']['table']['base'] = [
    'title' => 'BRI Location remote data',
    'query_id' => 'views_remote_data_query',
  ];

  return $data;
}

/**
 * Implements hook_views_query_alter().
 */
function brimw_views_query_alter(
  ViewExecutable $view,
  QueryPluginBase $query
) {
  if ($view->id() == 'content') {
    $site_id = \Drupal::service('brimw.rbac_helper')->getSiteIdByRole();
    if (!is_null($site_id)) {
      if ($query instanceof Drupal\views\Plugin\views\query\Sql) {
        $query->addWhere(1, 'taxonomy_term_field_data_node__field_site_id.tid', $site_id, '=');
      }
    }
  }
}

/**
 * Implements hook_field_widget_single_element_form_alter().
 *
 * @link [https://drupal.stackexchange.com/a/317870/3813] Description and discussion
 */
function brimw_field_widget_single_element_form_alter(&$element, FormStateInterface $form_state, $context) {
  if (!isset($element['#paragraph_type'])) {
    return;
  }
  $delta = $context['delta'];
  $paragraphBundle = $element['#paragraph_type'];

  /** @var \Drupal\field\Entity\FieldConfig $fieldDefinition */
  $fieldDefinition = $context['items']->getFieldDefinition();
  $contentFieldName = $fieldDefinition->getName();

  // @see \Drupal\paragraphs\Plugin\Field\FieldWidget\ParagraphsWidget::formElement()
  $widgetState = \Drupal\Core\Field\WidgetBase::getWidgetState($element['#field_parents'], $contentFieldName, $form_state);

  // If this is an empty paragraph, do nothing.
  if (!isset($widgetState['paragraphs'][$delta])) {
    return;
  }

  // Don't act on Paragraph previews.
  if (!\Drupal\Core\Render\Element::children($element['subform'])) {
    return;
  }

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $widgetState['paragraphs'][$delta]['entity'];

  $functionName = 'brimw_paragraph__' . $paragraphBundle . '__form_alter';
  if (function_exists($functionName)) {
    $functionName($element['subform'], $element, $form_state, $context, $delta, $paragraph);
  }
}

/**
 * Implements pseudo hook hook_paragraph__BUNDLE__form_alter().
 */
function brimw_paragraph__location__form_alter(array &$subform, array &$element, \Drupal\Core\Form\FormStateInterface $form_state, array $context, int $delta, \Drupal\paragraphs\Entity\Paragraph $paragraph):void {
  $type_options = \Drupal::service('brimw.location_remote_data')->getTypeOptions();
  $subform['type_ids'] = [
    '#type' => 'checkboxes',
    '#title' => t('Location types'),
    '#descrition' => t('Location types to display'),
    '#options' => $type_options,
  ];
}
